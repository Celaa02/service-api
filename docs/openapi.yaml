openapi: 3.0.3
info:
  title: Coffee Shop API
  version: 1.0.0
servers:
  - url: https://{apiId}.execute-api.{region}.amazonaws.com/{stage}
    variables:
      apiId: { default: your-api-id }
      region: { default: us-east-1 }
      stage: { default: dev }

paths:
  /products:
    post:
      summary: Create product
      tags: [Products]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProductCreate' }
      responses:
        '201':
          {
            description: Created,
            content: { application/json: { schema: { $ref: '#/components/schemas/Product' } } },
          }
        '400': { $ref: '#/components/responses/ValidationError' }
    get:
      summary: List products
      tags: [Products]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Product' }

  /products/{productId}:
    parameters:
      - $ref: '#/components/parameters/ProductId'
    get:
      summary: Get product by id
      tags: [Products]
      responses:
        '200':
          {
            description: OK,
            content: { application/json: { schema: { $ref: '#/components/schemas/Product' } } },
          }
        '404': { $ref: '#/components/responses/NotFound' }
    put:
      summary: Update product
      tags: [Products]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProductUpdate' }
      responses:
        '200':
          {
            description: OK,
            content: { application/json: { schema: { $ref: '#/components/schemas/Product' } } },
          }
        '404': { $ref: '#/components/responses/NotFound' }
        '400': { $ref: '#/components/responses/ValidationError' }
    delete:
      summary: Delete product
      tags: [Products]
      responses:
        '200':
          {
            description: OK,
            content:
              {
                application/json:
                  { schema: { type: object, properties: { deleted: { type: string } } } },
              },
          }
        '404': { $ref: '#/components/responses/NotFound' }

  /orders:
    post:
      summary: Create order
      tags: [Orders]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/OrderCreate' }
      responses:
        '201':
          {
            description: Created,
            content: { application/json: { schema: { $ref: '#/components/schemas/Order' } } },
          }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }
        '400': { $ref: '#/components/responses/ValidationError' }

  /orders/{id}:
    parameters:
      - $ref: '#/components/parameters/OrderId'
    get:
      summary: Get order by id
      tags: [Orders]
      responses:
        '200':
          {
            description: OK,
            content: { application/json: { schema: { $ref: '#/components/schemas/Order' } } },
          }
        '404': { $ref: '#/components/responses/NotFound' }

  /users/{id}/orders:
    get:
      summary: List orders by user
      tags: [Orders]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Cursor'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderList'
  /orders/{id}/confirm:
    parameters:
      - $ref: '#/components/parameters/OrderId'
    patch:
      summary: Confirm order
      tags: [Orders]
      requestBody:
        required: false
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ConfirmOrderBody' }
      responses:
        '200':
          {
            description: Confirmed,
            content: { application/json: { schema: { $ref: '#/components/schemas/Order' } } },
          }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }

  /orders/{id}/deliver:
    parameters:
      - $ref: '#/components/parameters/OrderId'
    patch:
      summary: Deliver order
      tags: [Orders]
      responses:
        '200':
          {
            description: Delivered,
            content: { application/json: { schema: { $ref: '#/components/schemas/Order' } } },
          }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    ProductId:
      in: path
      name: productId
      required: true
      schema: { type: string }
    OrderId:
      in: path
      name: id
      required: true
      schema: { type: string }
    Limit:
      in: query
      name: limit
      required: false
      schema: { type: integer, minimum: 1, maximum: 100, default: 20 }
    Cursor:
      in: query
      name: cursor
      required: false
      schema: { type: string }

  responses:
    NotFound:
      description: Not found
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    Conflict:
      description: Conflict
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    ValidationError:
      description: Validation error
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }

  schemas:
    ProductCreate:
      type: object
      required: [name, price, stock]
      properties:
        name: { type: string, minLength: 1 }
        price: { type: number, minimum: 0 }
        stock: { type: integer, minimum: 0 }
    ProductUpdate:
      type: object
      properties:
        name: { type: string, minLength: 1 }
        price: { type: number, minimum: 0 }
        stock: { type: integer, minimum: 0 }
    Product:
      type: object
      required: [productId, name, price, stock]
      properties:
        productId: { type: string }
        name: { type: string }
        price: { type: number }
        stock: { type: integer }

    OrderItem:
      type: object
      required: [productId, qty]
      properties:
        productId: { type: string }
        qty: { type: integer, minimum: 1 }

    OrderCreate:
      type: object
      required: [userId, items]
      properties:
        userId: { type: string }
        items:
          type: array
          minItems: 1
          items: { $ref: '#/components/schemas/OrderItem' }

    ConfirmOrderBody:
      type: object
      properties:
        paymentId:
          { type: string, description: 'Id de la pasarela de pagos (o mock si no hay integraci√≥n)' }

    Order:
      type: object
      required: [orderId, userId, items, total, status, createdAt]
      properties:
        orderId: { type: string }
        userId: { type: string }
        items:
          type: array
          items: { $ref: '#/components/schemas/OrderItem' }
        total: { type: number, minimum: 0 }
        status: { type: string, enum: [CREATED, CONFIRMED, DELIVERED] }
        createdAt: { type: string, format: date-time }
        confirmedAt: { type: string, format: date-time, nullable: true }
        deliveredAt: { type: string, format: date-time, nullable: true }
        paymentId: { type: string, nullable: true }

    OrderList:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
            properties:
              orderId: { type: string }
              total: { type: number }
              status: { type: string, enum: [CREATED, CONFIRMED, DELIVERED] }
              createdAt: { type: string, format: date-time }
        nextCursor: { type: string }

    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code: { type: string }
            message: { type: string }
            details: { type: object, additionalProperties: { type: string } }

security:
  - bearerAuth: []
